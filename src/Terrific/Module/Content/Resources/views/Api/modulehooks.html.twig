<div class="rich">
    <p>Modules are the real stars of your TerrificJS application. All of your JavaScript code will find its
        place in one of the modules. In regard to this fact you will find yourself spending most of your time
        writing modules.</p>

    <p>
        Each module has two opportunities to hook itself into the module initializing process.
        All hook methods (called phases) are optional – so you don't have to implement them, if you don't need them.
        They are called in the same order as below.
    </p>

    <h3 id="on">on</h3>
{% highlight 'js' 'pygment' %}
/**
 * Hook function to do all of your module stuff.
 *
 * @method on
 * @param {Function} callback function
 * @return void
 */
on: function(callback) {
    callback();
}
{% endhighlight %}
    <p>This phase is the most common and important hook method. All code related you your module is going inside this method.
       Here you can load additional scripts and styles, manipulate your DOM, bind events to it and breathe life into your module. The power is yours!</p>
    <p>
        The <em>on</em> hook is the first module hook. It is used all over the place. Often it is even the only implemented hook
        in a module.
    </p>
    <p>
        To ensure proper module encapsulation – and therefore to avoid side effects – you only have to use $ctx as the second parameter in all of your selectors.
    </p>
{% highlight 'js' 'pygment' %}
on: function(callback) {
    var $ctx = this.$ctx,
        self = this;

    $('.encapsulated', $ctx).on('click', function() {
        console.log('I am the encapsulated button of module ' + self.id);
    });

    callback();
}
{% endhighlight %}


    <h3 id="after">after</h3>
    <p>You want to provide a default state for your module? This is the phase for triggering your bound events.</p>
{% highlight 'js' 'pygment' %}
/**
 * Hook function to trigger your events.
 *
 * @method after
 * @return void
 */
after: function() {

}
{% endhighlight %}
    <p>
        The <em>after</em> hook is the second and last module hook. The purpose
        of the <em>after</em> phase is to provide a default state to your module by triggering the
        bound event handlers.
    </p>

    <p>
        Why should you trigger your event handlers in the <em>after</em> and not directly in the
        <em>on</em> phase? To answer this question you need to know a little bit more about the module
        initialization process.
    </p>

    <p>
        The <em>on</em> phase is not synchronized among all modules, so the initialization of the modules happens
        pseudo parallel until the last stage of the process – the <em>after</em> phase – has been reached. In
        other words: until the <em>after</em> phase has been reached, each module runs isolated and do not care
        about the state of the other modules.
    </p>

    <p>
        Why do we need the after phase to be synchronized among all modules? In some cases, a triggered event
        notifies other modules over a <em>Connector</em> about its state. Depending on the action to perform, an error
        may occur, if one of the notified modules has not finished its <em>on</em> phase yet. To prevent such problems,
        this last initialization stage is synchronized among all modules.
    </p>
    <p>
        That's it…
    </p>
</div>