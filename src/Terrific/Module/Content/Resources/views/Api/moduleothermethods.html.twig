<div class="rich">
    <h3 id="fire">fire - stay in touch with your connected modules</h3>
{% highlight 'js' 'pygment' %}
/**
 * Notifies all attached connectors about changes.
 *
 * @method fire
 * @param {String} state The new state
 * @param {Object} data The data to provide to your connected modules (optional)
 * @param {Array} channels  A list containting the channel ids to send the event to (optional)
 * @param {Function} defaultAction The default action to perform (optinal)
 */
fire: function(state, [data], [channels], [defaultAction]) {
{% endhighlight %}
    <p>The fire method is your communication device. Stay in touch with your connected modules!</p>
    <p>
        <a title="connector documentation" href="{{ path('api_connector') }}">Connectors</a> provides you an easy and concise way
        to connect your modules. But once connected, how can they talk with each other? The <em>fire</em>
        method is your communication device!
    </p>
    <h4>Example: Talk about the current mood</h4>

    <p>
        Given the case that connected modules want to make smalltalk about their current mood. Smalltalk should be easy…
        so it is with TerrificJS ;-)
    </p>

    <p>In your «talking» module</p>
{% highlight 'js' 'pygment' %}
on: function(callback) {
    var self = this,
    $ctx = this.$ctx;

    $('.talk', $ctx).bind('click', function() {
        self.fire('changeMood', { mood : 'perfect' }, function() { $.log.debug('yeah... really'); });
    });
    
    callback();
}
{% endhighlight %}

    <p>In your «receiving» module</p>

{% highlight 'js' 'pygment' %}
onChangeMood: function(data) {
    $.log.debug('... oh you are in a ' + data.mood + ' mood?');
},

afterChangeMood: function(data) {
    $.log.debug('... is it because of the weather?');
}
{% endhighlight %}
    <p>The logging output of the conversation above is:</p>

{% highlight 'html' 'pygment' %}
... oh you are in a perfect mood?
yeah... really
... is it because of the weather?
{% endhighlight %}
    <h4>Example: Shut up your smalltalk partner</h4>

    <p>
        Looking at the snippet above, you see that the «receiving» module has 2 chances to interact – <em>onChangeMood</em>
        and <em>afterChangeMood</em>. But why?<br>
        Maybe you are not in the mood for smalltalk ;-)
    </p>

    <p>In your «receiving» module</p>

{% highlight 'js' 'pygment' %}
onChangeMood: function(data) {
    $.log.debug('... oh you are in a ' + data.mood + ' mood? So, because everything seems to be ok - there is no need for a smalltalk...');
    return false;
},

afterChangeMood: function(data) {
    $.log.debug('... is it because of the weather?');
}
{% endhighlight %}

    <p>Assuming that the talking module remains the same, the logging output is:</p>

{% highlight 'html' 'pygment' %}
... oh you are in a perfect mood?
So, because everything seems to be ok - there is no need for a smalltalk...
{% endhighlight %}
    <p>So by simply returning <em>false</em>, the receiving module can make a veto to suppress the execution of the
        <em>defaultAction</em> and the <em>afterChangeMood</em> method.</p>
    
    <h4>Example: Be selective with your smalltalk partners</h4>
    <p>
        If you have a look at the signature of the <em>fire</em> method again, you see that there is an optional <em>channels</em> parameter.
        In some cases you are connected to several connection channels, but you only want to talk over a specific one.
    </p>
    <p>
        In your «talking» module
    </p>
{% highlight 'js' 'pygment' %}
on: function(callback) {
    var self = this,
    $ctx = this.$ctx;
    
    this.sandbox.subscribe('VIP', this); // subscribe to the VIP channel

    $('.talk', $ctx).bind('click', function() {
        self.fire('changeMood', { mood : 'perfect' }, ['VIP'], function() { $.log.debug('Yes sir!'); });
    });
    
    callback();
}
{% endhighlight %}
    <p>
        By specifing that you only want to talk over the VIP channel, you can be seletive by choosing your smalltak partners.
    </p>
</div>