<div class="rich">
    <p>Although TerrificJS is very intuitive to use, there are a few basics that you need to understand.
        Otherwise you will be lost! … or at least they help you to become a TerrificJS addict in no time ;-)</p>

    <h3 id="conventions">Conventions</h3>

    <h4 id="modules">Modules</h4>

{% highlight 'html' 'pygment' %}
<div class="mod mod-news">
    <!-- your module content goes here -->
</div>
{% endhighlight %}
    <p>
        Looks pretty straight, isn't it? Your TerrificJS modules simply needs the <em>.mod</em> class – to identify them
        as modules – and the specific module class – ie. <em>.mod-news</em>.<br>
        These minimal conventions are enough for TerrificJS to instantiate the appropriate module –
        <em>Tc.Module.News</em> – automatically. To avoid JavaScript errors, TerrificJS checks prior to instantiation
        whether the specific <a href="{{ path('api_module') }}">Module</a> exists or not.
    </p>
    <p>
        In some cases you do not want to instantiate a module during the bootstrap. Instead you
        want to reduce the initial workload and lazy init the modules on demand (eg. after scrolling beyond the fold, on click for rarely used functionality etc.).
        This can be achieved by simply setting the <em>data-ignore</em> flag.
    </p>
{% highlight 'html' 'pygment' %}
<div class="mod mod-news" data-ignore="true">
    <!-- your module content goes here -->
</div>
{% endhighlight %}

    <h4 id="skins">Skins</h4>
    <p>
        What the hell is a <a href="{{ path('api_skin') }}">TerrificJS Skin</a>?
        TerrificJS skins are essentially nothing more than a <a
            href="http://en.wikipedia.org/wiki/Decorator_pattern#JavaScript_.28coffee_making_scenario.29" title="">JavaScript
        Decorator</a>.
    </p>
{% highlight 'html' 'pygment' %}
<div class="mod mod-news skin-news-highlighted">
    <!-- your module content goes here -->
</div>
{% endhighlight %}
    <p>
        To apply a TerrificJS <a href="{{ path('api_skin') }}">Skin</a> to your module you simply have
        to add an additional skin class to your markup – ie. skin-news-highlighted. This will decorate your <em>Tc.Module.News</em>
        instance with the appropriate <em>Tc.Module.News.Highlighted</em> skin.
    </p>
    <p>
        In some very rare cases you eventually need your module to be decorated more than once. Nothing easier than
        that!
    </p>
{% highlight 'html' 'pygment' %}
<div class='mod mod-news skin-news-highlighted skin-news-promo'>
    <!-- your module content goes here -->
</div>
{% endhighlight %}
    <p>
        Simply add a second skin class to your markup – ie. skin-news-promo. TerrificJS will decorate your module with
        the <em>Tc.Module.News.Highlighted</em> skin first and then wrap it again with <em>Tc.Module.News.Promo</em>
        skin. So TerrificJS will decorate your module twice by retaining the order in your markup.
    </p>

    <h4 id="connectors">Connectors</h4>
    <p>
        Connectors provides you the possibility to let your modules talk with each other over configurable communication
        channels. Whilst the preceding components – modules and skins – both have their CSS and therefore visual
        counterpart, connectors are purely abstract. So connectors do not need an additional class on your TerrificJS module. Instead
        the naming convention for connectors are based on the <a href="http://ejohn.org/blog/html-5-data-attributes/">HTML5 data attribute</a>
    </p>
{% highlight 'html' 'pygment' %}
<div class="mod mo-news skin-news-highlighted" data-connectors="status,filtering,special-filtering">
    <!-- your news module content goes here -->
</div>
<div class="mod mod-tracking" data-connectors="1">
    <!-- your tracking module content goes here -->
</div>
{% endhighlight %}
    <p>
        The <em>data-connectors</em> attribute takes a comma separated list of connector ids. Each of them refers to a
        separate communication channel. As you may have noticed in the snippet above, connector ids could contain 2 - separated by a dash –
        parts:
    </p>
    <ul>
        <li>
            <mark>connectorName</mark>
            – identifies the Connector class, ie. special refers to the
            Tc.Connector.Special class (optional)
        </li>
        <li>
            <mark>connectorId</mark>
            – the communication channel id, eg. 1, filtering, status (required)
        </li>
    </ul>
    <p>
        If only the connectorId is provided, TerrificJS will wire up the associated <em>Modules</em> with the default
        connector. The default connector is the only bundled TerrificJS connector and treats all associated
        modules equally – which means that every module can fire and retrieve events.
    </p>

    <p>
        If you need an additional, more advanced connector — ie. the <em>Special</em> connector – you will have to write it
        on your own.
    <p>
        Please refer to the <a href="{{ path('api_connector') }}" title="">connector documentation</a> for further information.
    </p>

    <h4 id="conclusion">Conclusion</h4>
    <p>As long as your markup uses the above naming conventions you do not have to worry about registering your
        TerrificJS components manually. This is all done for you automatically.
    </p>

    <p>
        However there may be some cases where you are not able to apply these conventions to your project or to a
        specific part of your markup. In this case <a href="{{ path('api_application') }}#registerModule">registerModule</a> provides you the
        abilility to register
        your modules by hand.
    </p>

    <h3 id="bootstrap">Bootstrap</h3>
    <p>
    Every TerrificJS page or application has a bootstrap that does all of the annoying work for you automatically. All you have to do to is to place the bootstrap code at the end of your TerrificJS application. Believe me, it really saves you a lot of time and tedious work ;-)
    </p>

    <h4 id="basicbootstrap">Basic bootstrap</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
        var application = new Tc.Application($page);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    As long as your markup uses the <a href="#conventions" title="">TerrificJS conventions</a>, this tiny snippet is all you need. Place it before the closing <em>&lt;/body&gt;</em> tag, reload your page and be stunned ;-)
    </p>
    <p>
    If you need components that does not conform to the <a href="#conventions" title="">TerrificJS naming conventions</a> – ie. global modules for sitewide functionality – please have a look at the <a href="{{ path('api_application') }}#registerModule" title="">registerModule</a> documentation.
    </p>

    <h3 id="config">Config</h3>
    <p>
    TerrificJS comes with a very small config. It is shared among almost all TerrificJS components – so it is a good thing to store your configuration param in this global object.
    </p>
{% highlight 'js' 'pygment' %}
/**
 * Contains the application base config.
 *
 * @author Remo Brunschwiler
 * @namespace Tc
 * @class Config
 * @static
 */
Tc.Config = {
    /**
     * The paths for the different types of dependencies.
     *
     * @property dependencies
     * @type Object
     */
    dependencies: {
        css: '/css/dependencies',
        js: '/js/dependencies'
    }
};
{% endhighlight %}
    <p>
    The paths for the different dependencies are the only params – and they are not even required but helps you when using script loaders – for TerrificJS. But if needed you can extend or change the config as you want. There are two different ways to do so.
    </p>


    <h4 id="globalextension">#1 – Simple global extension</h4>
    <p>
    Often is is enough to simple change or extend the config prior bootstrapping your application.
    </p>
{% highlight 'js' 'pygment' %}
// in your script prior boostrapping
Tc.Config = Tc.$.extend(Tc.Config, {
    // your config params goes here
};
{% endhighlight %}
    <p>
    The main advantage of this solution is that you can bundle your extended config with all of your other JavaScript resources. But in some cases this is not ideal – especially when it comes to <acronym title="Content Management System">CMS</acronym> integration and you need a little bit more of flexibility.
    </p>

    <h4 id="bootstrapextension">#2 – Bootstrap extension</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body'),
        config = {
            // your config params goes here
        };
        var application = new Tc.Application($page, config);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    This solution provides you the maximal flexibility. You could even change your whole config on every bootstrap – ie. on every single page. Furthermore if you don't need to change the basic config – namely paths for the dependencies – there is no need to redeclare them.
    </p>
</div>