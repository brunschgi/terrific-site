<div class="rich">
    <p>
    Every TerrificJS page or application has a bootstrap that does all of the annoying work for you automatically. All you have to do to is to place the bootstrap code at the end of your TerrificJS application. Believe me, it really saves you a lot of time and tedious work ;-)
    </p>

    <h4 id="basicbootstrap">Basic bootstrap</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
        var application = new Tc.Application($page);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    As long as your markup uses the <a href="{{ path('api_conventions')}}" title="">TerrificJS conventions</a>, this tiny snippet is all you need. Place it before the closing <em>&lt;/body&gt;</em> tag, reload your page and be stunned ;-)
    </p>
    <p>
    If you need components that does not conform to the <a href="{{ path('api_conventions')}}" title="">TerrificJS naming conventions</a> – ie. global modules for sitewide functionality – please have a look at the <a href="{{ path('api_application') }}#registerModule" title="">registerModule</a> documentation.
    </p>

    <h3 id="config">Config</h3>
    <p>
    TerrificJS comes with a very small config. It is shared among almost all TerrificJS components – so it is a good thing to store your configuration param in this global object.
    </p>
{% highlight 'js' 'pygment' %}
/**
 * Contains the application base config.
 *
 * @author Remo Brunschwiler
 * @namespace Tc
 * @class Config
 * @static
 */
Tc.Config = {
    /**
     * The paths for the different types of dependencies.
     *
     * @property dependencies
     * @type Object
     */
    dependencies: {
        css: '/css/dependencies',
        js: '/js/dependencies'
    }
};
{% endhighlight %}
    <p>
    The paths for the different dependencies are the only params – and they are not even required but helps you when using script loaders – for TerrificJS. But if needed you can extend or change the config as you want. There are two different ways to do so.
    </p>


    <h4 id="globalextension">#1 – Simple global extension</h4>
    <p>
    Often is is enough to simple change or extend the config prior bootstrapping your application.
    </p>
{% highlight 'js' 'pygment' %}
// in your script prior boostrapping
Tc.Config = Tc.$.extend(Tc.Config, {
    // your config params goes here
};
{% endhighlight %}
    <p>
    The main advantage of this solution is that you can bundle your extended config with all of your other JavaScript resources. But in some cases this is not ideal – especially when it comes to <acronym title="Content Management System">CMS</acronym> integration and you need a little bit more of flexibility.
    </p>

    <h4 id="bootstrapextension">#2 – Bootstrap extension</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body'),
        config = {
            // your config params goes here
        };
        var application = new Tc.Application($page, config);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    This solution provides you the maximal flexibility. You could even change your whole config on every bootstrap – ie. on every single page. Furthermore if you don't need to change the basic config – namely paths for the dependencies – there is no need to redeclare them.
    </p>
</div>
