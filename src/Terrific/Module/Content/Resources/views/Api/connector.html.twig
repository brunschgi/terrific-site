<div class="rich">
    <p>Lets your modules stay in touch with each other.</p>
        <p>
            Modules are intended to be modular and therefore to work on their own. So why do we need to connect
            our modules with each other?
        </p>

        <p> TerrificJS modules most often have a visual counterpart that – due to the
            nature of frontend – necessarily has to be rectangular. So sometimes you will have to split up a
            functionality across multiple modules. Thinking of filtering of e.g. twitter messages, you could have a
            module <em>Messages</em> for displaying the messages and another module <em>Filter</em> for selecting the appropriate
            filters.
        </p>

        <p>
            Regarding the implementation of connectors, almost everything you need to know has already been covered
            elsewhere.
        </p>
        <ul>
            <li>In the <a href="{{ path('api_basics') }}#conventions">Conventions</a> chapter you learn how to connect
                your modules with each other by using the HTML5 data attribute.
            </li>
            <li>The <a href="{{ path('api_module') }}">Module</a> chapter introduces you the <a title="" href="{{ path('api_module') }}#fire">fire</a> method
                that serves you as communication device to stay in touch with your connected modules.
            </li>
        </ul>
        <p>
            The only thing that has not been covered so far are custom connectors. In most cases you do not need
            them – for all other cases… here is how ;-)
        </p>

        <p>… coming soon</p>
    </div>
</div>