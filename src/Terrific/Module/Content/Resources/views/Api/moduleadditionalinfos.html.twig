<div class="rich">
    <h3 id="moduleproperties">Module Properties</h3>
    <p>Every module has a small set of generally available properties. Ever wanted to know how TerrificJS ensures capsulation? Then this is for you!</p>
{% highlight 'js' 'pygment' %}
/**
 * Initializes the Default module.
 *
 * @method init
 * @constructor
 * @param {jQuery} $ctx the jquery context
 * @param {Sandbox} sandbox the sandbox to get the resources from
 * @param {Number} id the unique module id
 */
init: function($ctx, sandbox, id) {
    // call base constructor
    this._super($ctx, sandbox, id);
}
{% endhighlight %}
    <p>
        In the snippet above you see that the three originally received params – <em>$ctx</em>, <em>sandbox</em> and <em>id</em> – are passed straight to the constructor of the base <em>Module</em>. This properties are accessible from your other module methods by simply calling <em>this.$ctx</em>, <em>this.sandbox</em> or <em>this.id</em>. But what are this properties containing?
    </p>
    <ul>
        <li>
            <h5>$ctx</h5>
            <p>
                The <em>$ctx</em> property contains the <em>Module</em> context. Accordingly to the <a title="" href="{{ path('api_conventions') }}">TerrificJS naming conventions</a> this is the DOM Node with the CSS class <em>.mod</em>. To ensure proper module encapsulation – and therefore to avoid side effects – you only have to use <em>$ctx</em> as the second parameter in all of your jQuery selectors. Please have a look at the example in the <a title="" href="#on">on phase</a>.
            </p>
        </li>
        <li>
            <h5>sandbox</h5>
            <p>
                The <em>sandbox</em> property contains the <em>Sandbox</em> instance that is shared amongst all of your TerrificJS modules. See the <a title="Sandbox documentation" href="{{ path('api_sandbox') }}">Sandbox in action</a>!
            </p>
        </li>
        <li>
            <h5>id</h5>
            <p>
                The <em>id</em> property contains the unique module id. This unique identifier is additionally exposed in the DOM as <em>data-id</em> attribute. This can be useful ie. in combination with the <a title="" href="{{ path('api_sandbox') }}#getmodulebyid">getModuleById</a>method of the sandbox.
            </p>
        </li>
    </ul>
    <h3 id="inheritance">Inheritance</h3>

    <p>
        All modules extends the base class <em>Tc.Module</em>. The base class ensures that your Module is a
        welcomed guest in your TerrificJS application and provides you several useful methods and opportunities to hook
        yourself into the module initializing process.
    </p>
    <h4>Basic structure of a TerrificJS Module</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    /**
     * Default module implementation.
     *
     * @author Remo Brunschwiler
     * @namespace Tc.Module
     * @class Default
     * @extends Tc.Module
     */
    Tc.Module.Default = Tc.Module.extend({

        /**
         * Initializes the Default module.
         *
         * @method init
         * @constructor
         * @param {jQuery} $ctx the jquery context
         * @param {Sandbox} sandbox the sandbox to get the resources from
         * @param {String} modId the unique module id
         */
        init: function($ctx, sandbox, modId) {
            // call base constructor
            this._super($ctx, sandbox, modId);
        },

        /**
         * Hook function to do all of your module stuff.
         *
         * @method on
         * @param {Function} callback function
         * @return void
         */
        on: function(callback) {
            callback();
        },

        /**
         * Hook function to trigger your events.
         *
         * @method after
         * @return void
         */
        after: function() {
        }
    });
})(Tc.$);
{% endhighlight %}
    <p>
        Looking at the default structure you see that TerrificJS use the <a title=""
                                                                            href="http://ejohn.org/blog/simple-javascript-inheritance/">Simple
        JavaScript Inheritance</a>from the jquery inventor <a title="About John Resig" href="http://ejohn.org/about/">John
        Resig</a>. This inheritance pattern has a very small footprint and is very intuitive to use. In the next section
        I only explain the TerrificJS relevant aspects oft this pattern. If you want to know more details please read
        the <a title="" href="http://ejohn.org/blog/simple-javascript-inheritance/">original blog post</a> from John.
    </p>
    <h4>init</h4>
{% highlight 'js' 'pygment' %}
/**
 * Initializes the Default module.
 *
 * @method init
 * @constructor
 * @param {jQuery} $ctx the jquery context
 * @param {Sandbox} sandbox the sandbox to get the resources from
 * @param {String} modId the unique module id
 */
init: function($ctx, sandbox, modId) {
    // call base constructor
    this._super($ctx, sandbox, modId);
}
{% endhighlight %}
    <p>
        The <em>init</em> method takes the role of the constructor in Johns pattern. So all code that you normally write
        in your constructor function goes here.
    </p>
    <h4>_super</h4>
    <p>
        Most often – at least in TerrificJS – the only line of code in your constructor will be the call to
        the constructor of the base <em>Module</em>. In Johns pattern you can – like in other languages –
        access a parent method by simply calling <em>_super</em>. This not only works for the constructor as in the
        snippet above, but also for every other method that needs access to its parent functionality. Though in
        TerrificJS you will not need this feature quite often – it is at least good to know ;-)
    </p>
</div>