<div class="rich">
    <p><em>Modules</em> are the real stars of your TerrificJS application. All of your JavaScript code will find its
        place in one of the <em>Modules</em>. In regard to this fact you will find yourself spending most of your time
        writing <em>Modules</em>.</p>

    <p>
        Each Module has several opportunities to hook itself into the module initializing process.
        All hook methods (called phases) are optional â€“ so you don't have to implement them, if you don't need them.
        They are called in the same order as below.
    </p>
    <h3 id="dependencies">dependencies</h3>

    <p>The dependencies phase helps you to reduce the initial amount of JavaScript on your page by giving you the
        possibility to lazy load additional libraries, plugins or utils at the time you need them</p>

{% highlight 'js' 'pygment' %}
/**
 * Hook function to load the module specific dependencies.
 *
 * @method dependencies
 * @return void
 */
dependencies: function() {
}
{% endhighlight %}
    <p>
        The <em>dependencies</em> hook is the first of the four <em>Module</em> hooks (also called phases).
        In the <em>dependencies</em> phase you can dynamically request libraries, plugins or utils that are needed in
        one of the following phases. Thereby TerrificJS takes care of the timing and the necessary callbacks for your
        lazy loaded components. Additionally TerrificJS ensures that dependencies that are requested multiple times
        do not get you in trouble.
    </p>
    <h4>Load your plugin just in time</h4>
    <p>Thinking of live calculations that involve AJAX requests &ndash; ie. currency conversions &ndash; it is always
        a good idea to rate-limit your function handlers. My personal favourite when it comes to rate limitations
        is the <a title="" href="http://benalman.com/projects/jquery-throttle-debounce-plugin">throttle/debounce</a>
        plugin by <a title="" href="http://benalman.com/">Ben Alman</a>.
    </p>
    <p>
        Because you will not need this functionality all over the place it may be clever to lazy load it on demand.
    </p>

{% highlight 'js' 'pygment' %}
dependencies: function() {
    this.require('jquery.throttle-debounce.min.js', 'plugin', 'onBinding');
}
{% endhighlight %}
    <p>
        All the lazy loading stuff is done by calling the <a title="" href="#require">require</a> method of the
        base module. The snippet above lazy loads the throttle-debounce plugin and delays &ndash; accordingly to
        the 3rd param &ndash; the execution of the onBinding phase until the plugin is ready to use. In other words,
        the 3rd param provides you granular control over in which phase you will need the dependency. So instead of
        blocking the whole module initialization process only the appropriate phase will be delayed. This means that
        in the example the <em>beforeBinding</em> phase &ndash; the phase between the <em>dependencies</em> and
        the <em>onBinding</em> phase is executed normally without being delayed.
    </p>
    <p>
        Please refer to the <a title="" href="#require">require</a> documentation for all options and further examples.
    </p>

    <h3 id="beforebinding">beforeBinding</h3>
    <p>During the beforeBinding phase you can manipulate your DOM or load some additional data via AJAX for the
        following phases.</p>

{% highlight 'js' 'pygment' %}
/**
 * Hook function to do module specific stuff before binding the events (i.e. fetching some data).
 *
 * @method beforeBinding
 * @param {Function} callback the callback function which must be called at the end
 * @return void
 */
beforeBinding: function(callback) {
    callback();
}
{% endhighlight %}

    <p>
        The <em>beforeBinding</em> hook is the second of the four <em>Module</em> hooks (also called phases).
        The purpose of the <em>beforeBinding</em> phase is to manipulate your DOM to provide a javascript-enabled
        default state &ndash; ie. by hiding some DOM nodes that are only needed for the non-javascript fallback.
        Additionally the <em>beforeBinding</em> phase gives you the opportunity to load additional data &ndash; ie.
        language tokens for multilingual sites.
    </p>
    <h4>Manipulate your DOM</h4>
    <p>
        In live forms the submit button is often no needed. So let it hide!
    </p>

{% highlight 'js' 'pygment' %}
beforeBinding: function(callback) {
    $('input[type=submit]', this.$ctx).hide();
    callback();
}
{% endhighlight %}

    <p>
        If you have a closer look at the above example you will notice that at the end the <em>callback</em> function
        is executed. This step is necessary to give the start signal for the next phase.
    </p>
    <p>
        But why is the callback needed? Given the case that you perform AJAX requests inside of the
        <em>beforeBinding</em> phase, TerrificJS has no control about their state. So you have to manually raise
        the green flag for the next phase &ndash; ie. in the success handler of your AJAX call.
    </p>
    <p class="info">
        btw: the <em>beforeBinding</em> hook is the only one that has a callback function.
    </p>

    <h3 id="onbinding">onBinding</h3>
{% highlight 'js' 'pygment' %}
/**
 * Hook function to bind the module specific events.
 *
 * @method onBinding
 * @return void
 */
onBinding: function() {
}
{% endhighlight %}
    <p>This phase is the most common and important one. Here you are binding the events on your DOM and breathe life into your Modules. The power is yours!</p>

    <p>
        The <em>onBinding</em> hook is the third of the four <em>Module</em> hooks (also called phases). Whilst the
        preceding hooks &ndash; <a title="dependencies hook documentation"
                                   href="#dependencies">dependencies</a> and <a
            title="beforeBinding hook documentation" href="#beforeBinding">beforeBinding</a> &ndash; normally are
        used sparingly, the <em>onBinding</em> hook is used all over the place. Often it is even the only implemented hook
        in a <em>Module</em>.
    </p>
    <p>
        As the name implies, the <em>onBinding</em> hook is the place for binding the events on your DOM and breathe life
        into your <em>Modules</em>.
    </p>
    <h4>Example: Live currency conversion</h4>
    <p>
        If you read the documentation in logical order so far, you may have guessed it: It's time to use the <a title=""
                                                                                                                href="http://benalman.com/projects/jquery-throttle-debounce-plugin">throttle/debounce</a>
        plugin &ndash; which has been requested in the <a title="dependencies hook documentation"
                                                          href="#dependencies">dependencies</a> phase.
    </p>
{% highlight 'js' 'pygment' %}
onBinding: function() {
    var that = this;

    // bind the keyup event to start the conversion. To reduce the number of ajax calls, the debounce plugin is used.
    $('.amount', this.$ctx).keyup($.debounce(250, function() {
        var $this = $(this).closest('form');
        var url = $this.attr('action') + '?' + $this.serialize();
        // ajax stuff etc.

        return false;
    }));

    // other event bindings etc.
}
{% endhighlight %}
    <p>
        In the snippet above the <a title="" href="http://benalman.com/projects/jquery-throttle-debounce-plugin">throttle/debounce</a>
        plugin is used in the <em>keyup</em> event handler. As the code itself is plain jQuery it should look quite
        familiar, so that you can start right away writing your own terrific modules!
    </p>

    <h3 id="afterbinding">afterBinding</h3>
    <p>You want to provide a default state for your Module? This is the phase for triggering your bound events.</p>
{% highlight 'js' 'pygment' %}
/**
 * Hook function to do module specific stuff after binding the events (i.e. triggering some events).
 *
 * @method afterBinding
 * @return void
 */
afterBinding: function() {

}
{% endhighlight %}
    <p>
        The <em>afterBinding</em> hook is the last of the four <em>Module</em> hooks (also called phases). The purpose
        of the <em>beforeBinding</em> phase is to provide a default state to your <em>Module</em> by triggering the
        bound event handlers.
    </p>

    <p>
        Why should you trigger your event handlers in the <em>afterBinding</em> and not directly in the
        <em>onBinding</em> phase? To answer this question you need to know a little bit more about the module
        initialization process.
    </p>

    <p>
        Looking at the four phases of the this process, we see that neither <em>beforeBinding</em> nor
        <em>onBinding</em> are synchronized among all <em>Modules</em>. So the initialization of the Modules happens
        pseudo parallel until the last stage of the process &ndash; the afterBinding phase &ndash; has been reached. In
        other words: until the <em>afterBinding</em> phase has been reached, each module runs isolated and do not care
        about the state of the other <em>Modules</em>.
    </p>

    <p>
        Why do we need the afterBinding phase to be synchronized among all Modules? In some cases, a triggered event
        notifies other modules over a <em>Connector</em> about its state. Depending on the action to perform, an error
        may occur, if one of the notified Modules has not finished its onBinding phase yet. To prevent such problems,
        this last initialization stage is synchronized among all Modules.
    </p>
    <h4>Example: Triggering the first conversion</h4>

    <p>
        Assuming that an initial amount &ndash; ie. 1 Euro &ndash; has been provided from the backend, we can easily
        start the first conversion by simple triggering the submit event.
    </p>
{% highlight 'js' 'pygment' %}
afterBinding: function() {
    $('.converter', this.$ctx).trigger('submit');
}
{% endhighlight %}
    <p>
        That's itâ€¦
    </p>
</div>