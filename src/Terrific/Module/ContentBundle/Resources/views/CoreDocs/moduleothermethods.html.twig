<div class="rich">
    <h3 id="require">require – load some dependencies</h3>
    <p>This method is used in the dependencies phase. It ensures that the dependencies are loaded correctly and that
        dependencies that are requested multiple times do not get you in trouble.</p>
{% highlight 'js' 'pygment' %}
/**
 * Manages the required dependencies.
 *
 * @method require
 * @param {String} dependency the dependency (i.e. swfobject.js)
 * @param {String} type the dependency type (library | plugin | util | url)
 * @param {String} phase the module phase where the dependency is needed (ie. beforeBinding, onBinding)
 * @param {boolean} executeCallback indicates whether the phase callback should be executed or not (useful for dependencies that provide their own callback mechanism)
 * @return {void}
 */
require: function(dependency, [type], [phase], [executeCallback]) {
{% endhighlight %}
    <p>
        The <em>require</em> method is used to lazy load additional scripts during the <a
            title="dependencies hook documentation" href="#dependencies">dependencies</a> phase. Using <em>require</em>
        has several benefits compared with simply including scripts on your page:</p>
    <ul>
        <li>Reduces the initial amount of JavaScript on the page</li>
        <li>Loads scripts in a non-blocking manner</li>
        <li>Granular control about when the required script is actually needed</li>
        <li>Abstracted interface &ndash; so you do not have to repeat yourself</li>
        <li>Allows for easier platform migration due to configurable script paths</li>
    </ul>
    <p>
        Looking at the benefits above, the main one is: Performance!! So whenever you need an additional script that is
        not needed everywhere on your page we strongly encourage you to use <em>require</em>.
    </p>
    <h4>Options</h4>

    <p>
        A look at the function signature above shows that <em>require</em> provides you several possibilities for
        loading your scripts.
    </p>
    <h5>@param dependency <span>required</span></h5>

    <p>
        In most case, this param contains the name of the dependency to load. Only if the <em>type</em> param is set to
        <em>url</em> you have to provide the full path to the appropriate dependency.
    </p>
    <h5>@param type <span>default: plugin</span></h5>

    <p>
        TerrificJS knows 4 types of dependencies:
    </p>
    <ul>
        <li>library &ndash; mostly scripts that could be used standalone (ie. <a title="swfobject on google code"
                                                                                 href="http://code.google.com/p/swfobject/">swfobject</a>
            etc.)
        </li>
        <li>plugin &ndash; jQuery plugins</li>
        <li>util &ndash; utilities and helper functions that are possibly needed more than once within your modules (ie.
            AJAX Utility, Cookie Helper etc.)
        </li>
        <li>url - for external scripts (ie. <a title="google maps documentation"
                                               href="http://code.google.com/apis/maps/documentation/javascript/">Google
            Maps</a> etc.)
        </li>
    </ul>
    <p>The first 3 of the above types are interchangeable. They only serve for a logical separation of your scripts.</p>

    <p>But how does TerrificJS knows the path to your libraries, plugins or utils? To allow platform migration without
        changing your code TerrificJS provides you the possibility to configure your paths in <a
                title="config documentation" href="{{ path('core_docs_basics') }}#config">several ways</a>.</p>
    <h5>@param phase <span>default: onBinding</span></h5>

    <p>The <em>phase</em> param provides you granular control over the time the dependency will be ready to use in your
        <em>Module</em>.</p>

    <p>Possible values are:</p>
    <ul>
        <li>beforeBinding</li>
        <li>onBinding</li>
        <li>afterBinding</li>
    </ul>
    <h5>@param executeCallback <span>default: true</span></h5>

    <p>This param is especially useful for dependencies that provide their own callback mechanism &ndash; ie. <a
            title="google maps documentation" href="http://code.google.com/apis/maps/documentation/javascript/">Google Maps
        v3</a>. If set to <em>false</em> the module initialization process is stopped and the phases need to be started
        manually.
    </p>
    <h4>Examples</h4>
    <h5>#1 &ndash; blockUI for the onBinding phase</h5>

    <p>Given the case that you want to use <a title="blockUI website" href="http://jquery.malsup.com/block/">blockUI</a>
        functionality in the <em>onBinding</em> phase &ndash; this is your snippet</p>
{% highlight 'js' 'pygment' %}
dependencies: function() {
    this.require('jquery.blockUI.js', 'plugin', 'onBinding');
}
{% endhighlight %}
    <h5>#2 &ndash; swfobject in the beforeBinding phase</h5>
    <p>Flash movies should be embedded as early as possible &ndash; typically in the <em>beforeBinding</em> phase</p>
{% highlight 'js' 'pygment' %}
dependencies: function() {
    this.require('swfobject.js', 'library', 'beforeBinding');
}
{% endhighlight %}

    <h3 id="fire">fire - stay in touch with your connected modules</h3>
{% highlight 'js' 'pygment' %}
/**
 * Notifies all attached connectors about changes.
 *
 * @method fire
 * @param {String} state the new state
 * @param {Object} data the data to provide to your connected modules
 * @param {Function} defaultAction the default action to perform
 * @return {void}
 */
fire: function(state, [data], [defaultAction]) {
{% endhighlight %}
    <p>The fire method is your communication device. Stay in touch with your connected Modules!</p>
    <p>
        <a title="connector documentation" href="{{ path('core_docs_connector') }}">Connectors</a> provides you an easy and concise way
        to connect your <em>Modules</em>. But once connected, how can they talk with each other? The <em>fire</em>
        method is your communication device!
    </p>
    <h4>Example: Talk about the current mood</h4>

    <p>
        Given the case that connected modules want to make smalltalk about their current mood. Smalltalk should be easy…
        so it is with TerrificJS ;-)
    </p>

    <p>In your «talking» module</p>
{% highlight 'js' 'pygment' %}
onBinding: function() {
    var that = this,
    $ctx = this.$ctx;

    $('.talk', $ctx).bind('click', function() {
        that.fire('changeMood', { mood : 'perfect' }, function() { $.log.debug('yeah... really'); });
    });
}
{% endhighlight %}

    <p>In your «receiving» module</p>

{% highlight 'js' 'pygment' %}
onChangeMood: function(data) {
    $.log.debug('... oh you are in a ' + data.mood + ' mood?');
},

afterChangeMood: function(data) {
    $.log.debug('... is it because of the weather?');
}
{% endhighlight %}
    <p>The logging output of the conversation above is:</p>

{% highlight 'html' 'pygment' %}
... oh you are in a perfect mood?
yeah... really
... is it because of the weather?
{% endhighlight %}
    <h4>Example: Shut up your smalltalk partner</h4>

    <p>
        Looking at the snippet above, you see that the «receiving» module has 2 chances to interact &ndash; <em>onChangeMood</em>
        and <em>afterChangeMood</em>. But why?<br>
        Maybe you are not in the mood for smalltalk ;-)
    </p>

    <p>In your «receiving» module</p>

{% highlight 'js' 'pygment' %}
onChangeMood: function(data) {
    $.log.debug('... oh you are in a ' + data.mood + ' mood? So, because everything seems to be ok - there is no need for a smalltalk...');
    return false;
},

afterChangeMood: function(data) {
    $.log.debug('... is it because of the weather?');
}
{% endhighlight %}

    <p>Assuming that the talking module remains the same, the logging output is:</p>

{% highlight 'html' 'pygment' %}
... oh you are in a perfect mood?
So, because everything seems to be ok - there is no need for a smalltalk...
{% endhighlight %}
    <p>So by simply returning <em>false</em>, the receiving module can make a veto to suppress the
        <em>defaultAction</em> and the <em>afterBinding</em> phase.</p>
</div>