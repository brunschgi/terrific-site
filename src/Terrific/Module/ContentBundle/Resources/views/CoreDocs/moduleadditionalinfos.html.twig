<div class="rich">
    <h3 id="inheritance">Inheritance</h3>

    <p>
        All <em>Modules</em> extends the base class <em>Tc.Module</em>. The base class ensures that your Module is a
        welcomed guest in your TerrificJS application and provides you several useful methods and opportunities to hook
        yourself into the <em>Module</em> initializing process.
    </p>
    <h4>Basic structure of a TerrificJS Module</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    /**
     * Default module implementation.
     *
     * @author Remo Brunschwiler
     * @namespace Tc.Module
     * @class Default
     * @extends Tc.Module
     */
    Tc.Module.Default = Tc.Module.extend({

        /**
         * Initializes the Default module.
         *
         * @method init
         * @return {void}
         * @constructor
         * @param {jQuery} $ctx the jquery context
         * @param {Sandbox} sandbox the sandbox to get the resources from
         * @param {String} modId the unique module id
         */
        init: function($ctx, sandbox, modId) {
        // call base constructor
        this._super($ctx, sandbox, modId);
        },

        /**
         * Hook function to load the module specific dependencies.
         *
         * @method dependencies
         * @return void
         */
        dependencies: function() {
        },

        /**
         * Hook function to do module specific stuff before binding the events (i.e. fetching some data).
         *
         * @method beforeBinding
         * @param {Function} callback the callback function which must be called at the end
         * @return void
         */
        beforeBinding: function(callback) {
        callback();
        },

        /**
         * Hook function to bind the module specific events.
         *
         * @method onBinding
         * @return void
         */
        onBinding: function() {

        },

        /**
         * Hook function to do module specific stuff after binding the events (i.e. triggering some events).
         *
         * @method afterBinding
         * @return void
         */
        afterBinding: function() {

        }
    });
})(Tc.$);
{% endhighlight %}
    <p>
        Looking at the default structure you see that TerrificJS use the <a title=""
                                                                            href="http://ejohn.org/blog/simple-javascript-inheritance/">Simple
        JavaScript Inheritance</a>from the jquery inventor <a title="About John Resig" href="http://ejohn.org/about/">John
        Resig</a>. This inheritance pattern has a very small footprint and is very intuitive to use. In the next section
        I only explain the TerrificJS relevant aspects oft this pattern. If you want to know more details please read
        the <a title="" href="http://ejohn.org/blog/simple-javascript-inheritance/">original blog post</a> from John.
    </p>
    <h4>init</h4>
{% highlight 'js' 'pygment' %}
/**
 * Initializes the Default module.
 *
 * @method init
 * @return {void}
 * @constructor
 * @param {jQuery} $ctx the jquery context
 * @param {Sandbox} sandbox the sandbox to get the resources from
 * @param {String} modId the unique module id
 */
init: function($ctx, sandbox, modId) {
    // call base constructor
    this._super($ctx, sandbox, modId);
}
{% endhighlight %}
    <p>
        The <em>init</em> method takes the role of the constructor in Johns pattern. So all code that you normally write
        in your constructor function goes here.
    </p>
    <h4>_super</h4>
    <p>
        Most often &ndash; at least in TerrificJS &ndash; the only line of code in your constructor will be the call to
        the constructor of the base <em>Module</em>. In Johns pattern you can &ndash; like in other languages &ndash;
        access a parent method by simply calling <em>_super</em>. This not only works for the constructor as in the
        snippet above, but also for every other method that needs access to its parent functionality. Though in
        TerrificJS you will not need this feature quite often &ndash; it is at least good to know ;-)
    </p>

    <h3 id="moduleproperties">Module Properties</h3>
    <p>Every module has a small set of generally available properties. Ever wanted to know how TerrificJS ensures capsulation? Then this is for you!</p>
{% highlight 'js' 'pygment' %}
/**
 * Initializes the Default module.
 *
 * @method init
 * @return {void}
 * @constructor
 * @param {jQuery} $ctx the jquery context
 * @param {Sandbox} sandbox the sandbox to get the resources from
 * @param {String} modId the unique module id
 */
init: function($ctx, sandbox, modId) {
    // call base constructor
    this._super($ctx, sandbox, modId);
}
{% endhighlight %}
    <p>
        In the snippet above you see that the three originally received params &ndash; $ctx, sandbox and modId &ndash; are passed straight to the constructor of the base <em>Module</em>. This properties are accessible from your other <em>Module</em> methods by simply calling this.$ctx, this.sandbox or this.modId. But what are this properties containing?
    </p>
    <ul>
        <li>
            <h5>$ctx</h5>
            <p>
                The <em>$ctx</em> property contains the <em>Module</em> context. Accordingly to the <a title="" href="{{ path('core_docs_basics') }}#conventions">TerrificJS naming conventions</a> this is the DOM Node with the CSS class <em>.mod</em>. To ensure proper <em>Module</em> capsulation &ndash; and therefore to avoid side effects &ndash; you only have to use <em>$ctx</em> as the second parameter in all of your jQuery selectors. Please have a look at one of the <em>Module</em> initializing phases &ndash; ie. the <a title="" href="#onbinding">onBinding Phase</a> &ndash; for examples and further information.
            </p>
        </li>
        <li>
            <h5>sandbox</h5>
            <p>
                The <em>sandbox</em> property contains the <em>Sandbox</em> instance that is shared amongst all of your terrific <em>Modules</em>. See the <a title="Sandbox documentation" href="{{ path('core_docs_sandbox') }}">Sandbox in action</a>!
            </p>
        </li>
        <li>
            <h5>modId</h5>
            <p>
                The <em>modId</em> property contains the unique module id. This unique identifier is additionally exposed in the DOM as <em>data-id</em> attribute. This can be useful ie. in combination with the <a title="" href="{{ path('core_docs_sandbox') }}#getmodulebyid">getModuleById</a>method of the sandbox.
            </p>
        </li>
    </ul>
</div>