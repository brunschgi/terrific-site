<div class="rich">
    <h2>Application</h2>
    <p>Whilst the <em>Modules</em> are the stars of your TerrificJS application or website, the <em>Application</em> is
        the master and commander, the heartpiece of Terrific. It is instantiated during the Bootstrap and is responsible
        for the magical module registration process and for keeping all of your great <em>Modules</em> together.</p>
    <p>If you want to gain a deeper understanding of how TerrificJS works - this is for you!</p>

    <h3>registerModule</h3>
{% highlight 'js' 'pygment' %}
/**
  * @method registerModule
  * @param {jQuery} $node the module node.
  * @param {String} modName the module name. it must match the class name of the module (case sensitive).
  * @param {Array} skins a list of skin names. each entry must match a class name of a skin (case sensitive)).
  * @param {Array} connectors a list of connectors identifiers. schema: <connectorName><connectorId><connectorRole> (ie. MasterSlave1Master).
  * @return {Module} the reference to the registered module.
  */
 registerModule : function($node, modName, [skins], [connectors]) {
{% endhighlight %}
    <p>
    As long as your markup uses the <a href="{{ path('core_docs_basics') }}#conventions" title="">TerrificJS naming conventions</a> you do not have to worry about registering your modules manually. This is all done for you automatically from the <em> registerModules</em> method (note the plural) that internally call <em>registerModule</em> for every found module.
    </p>
    <p>
    However there may be some cases where you are not able to apply these conventions to your project or to a specific part of your markup. In this case <em>registerModule</em> provides you the abililty to register your modules by hand.
    </p>

    <h4>Example: Register a "global" module</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
    var application = new Tc.Application($page);
    application.registerModules();
    application.registerModule($page, 'Global');
    application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    In the above example we register a global module that provides sitewide functionality on the <em>$page</em>. The $page jQuery object is set as the context of the <em> Tc.Module.Global</em> module instance.
    </p>

    <h4>Example: Register all modules by hand</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
    var application = new Tc.Application($page);
    application.registerModule($('#navigation'), 'Navigation', ['Home'], ['1']);
    application.registerModule($('#imageSlider'), 'ImageSlider', null, ['1']);
        application.registerModule($page, 'Global'); // layout functionality
    application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    This way you are able to register your <em>Modules</em> manually wherever you want without the need of using the <a href="/learn/basics/conventions" title="">TerrificJS naming conventions</a> for your markup.
    </p>
</div>