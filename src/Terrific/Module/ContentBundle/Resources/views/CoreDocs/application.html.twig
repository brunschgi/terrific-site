 <div class="rich">
    <p>Whilst the <em>Modules</em> are the stars of your TerrificJS application or website, the <em>Application</em> is
        the master and commander, the heartpiece of Terrific. It is instantiated during the Bootstrap and is responsible
        for the magical module registration process and for keeping all of your great <em>Modules</em> together.</p>
    <p>If you want to gain a deeper understanding of how TerrificJS works - this is for you!</p>

    <h3 id="registermodule"s>registerModule</h3>
{% highlight 'js' 'pygment' %}
/**
  * @method registerModule
  * @param {jQuery} $node the module node.
  * @param {String} modName the module name. it must match the class name of the module (case sensitive).
  * @param {Array} skins a list of skin names. each entry must match a class name of a skin (case sensitive)).
  * @param {Array} connectors a list of connectors identifiers. schema: <connectorName><connectorId><connectorRole> (ie. MasterSlave1Master).
  * @return {Module} the reference to the registered module.
  */
 registerModule : function($node, modName, [skins], [connectors]) {
{% endhighlight %}
    <p>
    As long as your markup uses the <a href="{{ path('core_docs_basics') }}#conventions" title="">TerrificJS naming conventions</a> you do not have to worry about registering your modules manually. This is all done for you automatically from the <em> registerModules</em> method (note the plural) that internally call <em>registerModule</em> for every found module.
    </p>
    <p>
    However there may be some cases where you are not able to apply these conventions to your project or to a specific part of your markup. In this case <em>registerModule</em> provides you the abililty to register your modules by hand.
    </p>

    <h4 id="registerglobalmodule">Register a "global" module</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
    var application = new Tc.Application($page);
    application.registerModules();
    application.registerModule($page, 'Global');
    application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    In the above example we register a global module that provides sitewide functionality on the <em>$page</em>. The $page jQuery object is set as the context of the <em> Tc.Module.Global</em> module instance.
    </p>

    <h4 id="registermodulesbyhand">Register modules by hand</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
    var application = new Tc.Application($page);
    application.registerModule($('#navigation'), 'Navigation', ['Home'], ['1']);
    application.registerModule($('#imageSlider'), 'ImageSlider', null, ['1']);
        application.registerModule($page, 'Global'); // layout functionality
    application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
    This way you are able to register your <em>Modules</em> manually wherever you want without the need of using the <a href="{{ path('core_docs_basics') }}#conventions" title="">TerrificJS naming conventions</a> for your markup.
    </p>

    <h3 id="registermodules">registerModules</h3>
{% highlight 'js' 'pygment' %}
/**
 * @method registerModules
 * @param {jQuery} $ctx the jquery context.
 * @return {Array} a list containing the references of the registered modules.
 */
registerModules : function([$ctx]) {
{% endhighlight %}
    <p>
        <em>registerModules</em> is perhaps the most important method of TerrificJS. It takes care of the <a href="{{ path('core_docs_basics') }}#conventions" title="">TerrificJS naming conventions</a> and instantiates all <em>Modules</em>, <em>Skins</em> and defined <em>Connectors</em> in the given context automatically. The clue is, that because of this only the TerrificJS components that are actually used on the current page are instantiated. So there are no unused objects, no unnecessarily executed JavaScript code, no misunderstandings, no chaos - everything is perfectly fitted for the current page.
    </p>
    <blockquote><p>
        So you will never have to worry about anything - it's just magic!
    </p></blockquote>
    <h4 id="registermodulesincontext">Register modules in a specific context</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
        var application = new Tc.Application($page);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
        In the above example <em>registerModules</em> does not take a param. In this case the global context which has been given to the <em>Application</em> ($page) is used.
    </p>
    <p>
        If you only want to register <em>Modules</em> in specific parts of your application, you could do something like:
    </p>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var application = new Tc.Application();
        application.registerModules($('.head'));
        application.registerModules($('.foot'));
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
        The snippet above only registers the <em>Modules</em> in the head and the footer section.
    </p>
    <h3 id="start">start</h3>
{% highlight 'js' 'pygment' %}
/**
 * @method start
 * @param {Array} modules a list of the modules to start.
 * @return {void}
 */
start: function([modules]) {
{% endhighlight %}
    <p>
        The registration process only instantiates the TerrificJS components. Until <em>start</em>  is called, nothing seems to happen from a users point of view. The real game, however, starts as soon as <em>start</em> is called.
    </p>
    <blockquote><p>All of your great <em>Modules</em> will come to life.</p></blockquote>
    <h4 id="startmodules">Start all registered modules</h4>
{% highlight 'js' 'pygment' %}
(function($) {
    $(document).ready(function() {
        var $page = $('body');
        var application = new Tc.Application($page);
        application.registerModules();
        application.start();
    });
})(Tc.$);
{% endhighlight %}
    <p>
        As you see in the bootstrap example above, <em>start</em> has to be called after the module registration process. Calling <em>start</em> loops through all registered <em>Modules</em> and calls <em>start</em> on every individual <em>Module</em>. At this point the <em>Application</em> has done its initial work. Now the turn is at your <em>Modules</em>.
    </p>
 </div>